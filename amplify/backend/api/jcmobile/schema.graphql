type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  given_name: String!
  family_name: String!
  email: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  phone: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  owner: String

  hasPaidState: String
  address: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  city: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  province: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  postalCode: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  country: String

  location: LatLong
  profileImage: Image
  aboutMeShort: String
  aboutMeLong: String
  interests: String
  currentRole: String
  currentScope: String
  personality: String
  orgName: String
  orgType: String
  orgSize: String
  orgDescription: String
  joined: String

  owns: [Group] @connection(name: "OwnerUser", keyField: "owner")
  groups: [GroupMember] @connection(name: "UserMembers", keyField: "userID")
  messages: [Message]
    @connection(name: "UserMessages", keyField: "userId", sortField: "when")
}
type LatLong {
  latitude: String
  longitude: String
}
type Image {
  userId: String
  filenameSmall: String
  filenameMedium: String
  filenameLarge: String
  filenameUpload: String
}
type GroupMember
  @model(queries: null)
  @key(
    name: "byGroup"
    fields: ["groupID", "userID"]
    queryField: "groupMemberByGroup"
  )
  @key(
    name: "byUser"
    fields: ["userID", "groupID"]
    queryField: "groupMemberByUser"
  ) {
  id: ID!
  groupID: ID
  userID: ID
  group: Group @connection(name: "GroupMembers", keyField: "groupID")
  user: User @connection(name: "UserMembers", keyField: "userID")
}
type Group
  @model
  @searchable
  @key(name: "byType", fields: ["type", "id"], queryField: "groupByType")
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  owner: String!
  ownerUser: User @connection(name: "OwnerUser", keyField: "owner")
  type: String!
  name: String!

  description: String!
  memberCount: Int
  members: [GroupMember] @connection(name: "GroupMembers", keyField: "groupID")
  image: String!
  time: String
  lastUpdated: String
  location: String
  locationLatLong: LatLong
  length: String
  effort: String
  cost: String
  #organizerGroup:[Group]
  #organizerUser:[User]
  #instructors:[User]
  messages: [Message]
    @connection(name: "RoomMessages", keyField: "roomId", sortField: "when")
  eventType: String
  eventUrl: String
}

type CourseInfo
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  designedBy: String
  summary: [String]
  courseWeeks: [CourseWeek] @connection(name: "CourseInfoWeek", keyField: "id")
  subTitle: String
  #instructor: User
  introduction: [String]
}

type CourseWeek @model {
  id: ID!
  week: String
  date: String
  name: String
  leader: String
  courseInfo: CourseInfo @connection(name: "CourseInfoWeek", keyField: "id")
  lessons: [CourseLesson] @connection(name: "CourseWeekLesson", keyField: "id")
}
type CourseLesson @model {
  id: ID!
  name: String
  time: String
  description: [String]
  courseWeek: CourseWeek @connection(name: "CourseWeekLesson", keyField: "id")
  assignments: [CourseAssignment]
    @connection(name: "CourseLessonAssignment", keyField: "id")
}
type CourseAssignment @model {
  id: ID!
  due: String
  description: String
  courseLesson: CourseLesson
    @connection(name: "CourseLessonAssignment", keyField: "id")
}

type Message
  @model
  @key(name: "ByRoom", fields: ["roomId", "when"], queryField: "messagesByRoom")
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  when: String!
  roomId: ID
  userId: ID
  owner: String
  author: User @connection(name: "UserMessages", keyField: "userId")
  room: Group @connection(name: "RoomMessages", keyField: "roomId")
}
type Subscription {
  onCreateMessageByRoomId(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
}

type ResourceRoot @model {
  id: ID!
  type: String
  groupId: String
  resources: [Resource]
    @connection(name: "ResourceRootResource", keyField: "id")
}
type Resource @model {
  id: ID!
  type: String
  menuTitle: String
  title: String
  image: Image
  description: String
  extendedDescription: String
  #currentSeries:ResourceSeries @connection
  series: [ResourceSeries] @connection(name: "ResourceSeries", keyField: "id")
  root: ResourceRoot @connection(name: "ResourceRootResource", keyField: "id")
}
type ResourceSeries @model {
  id: ID!
  type: String
  title: String
  description: String
  image: String
  category: [String]
  status: String
  allFiles: String
  playlist: String
  playlistImage: String
  episodes: [ResourceEpisode]
    @connection(name: "ResourceSeriesEpisode", keyField: "id")
  resource: Resource @connection(name: "ResourceSeries", keyField: "id")
}

type ResourceEpisode @model {
  id: ID!
  episodeNumber: Int
  type: String
  title: String
  description: String
  videoPreview: String
  videoLowRes: String
  videoHiRes: String
  lessonPlan: String
  activityPage: String
  series: ResourceSeries
    @connection(name: "ResourceSeriesEpisode", keyField: "id")
}
