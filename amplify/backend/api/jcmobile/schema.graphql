type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {

  id: ID!
  given_name: String!
  family_name: String!
  email: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  phone: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  owner: String

  hasPaidState: String
  profileState: String
  address: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  city: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  province: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  postalCode: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  country: String

  location: LatLong
  profileImage: Image
  aboutMeShort: String
  aboutMeLong: String
  interests: String
  currentRole: String
  currentScope: String
  personality: String
  orgName: String
  orgType: String
  orgSize: String
  orgDescription: String
  joined: String

  owns: [Group] @connection(name: "OwnerUser", keyField: "owner")
  groups: [GroupMember] @connection(name: "UserMembers", keyField: "userID")
  organizations: [OrganizationMember] @connection(name: "UserOrganizations", keyField: "userId")
  messages: [Message] @connection(name: "UserMessages", keyField: "userId", sortField: "when")
}
type LatLong {
  latitude: String
  longitude: String
}
type Image {
  userId: String
  filenameSmall: String
  filenameMedium: String
  filenameLarge: String
  filenameUpload: String
}
type GroupMember
  @model(queries: null)
  @key(
    name: "byGroup"
    fields: ["groupID", "userID"]
    queryField: "groupMemberByGroup"
  )
  @key(
    name: "byUser"
    fields: ["userID", "groupID"]
    queryField: "groupMemberByUser"
  ) {
  id: ID!
  groupID: ID
  userID: ID
  group: Group @connection(name: "GroupMembers", keyField: "groupID")
  user: User @connection(name: "UserMembers", keyField: "userID")
}
type Group
  @model
  @searchable
  @key(name: "byType", fields: ["type", "id"], queryField: "groupByType")
  @key(name:"byOwnerOrg", fields:["ownerOrgID","name"])
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  owner: String!
  ownerOrgID:ID!
  ownerUser: User @connection(name: "OwnerUser", keyField: "owner")
  ownerOrg: Organization @connection(fields:["ownerOrgID"])
  type: String!
  name: String!

  description: String!
  memberCount: Int
  members: [GroupMember] @connection(name: "GroupMembers", keyField: "groupID")
  image: String!
  time: String
  lastUpdated: String
  location: String
  locationLatLong: LatLong
  length: String
  effort: String
  cost: String
  #organizerGroup:[Group]
  #organizerUser:[User]
  #instructors:[User]
  messages: [Message] @connection(name: "RoomMessages", keyField: "roomId", sortField: "when")
  eventType: String
  eventUrl: String
}
type OrganizationMember
  @model(queries: null)
  @key(
    name: "byOrganization"
    fields: ["organizationId", "userId"]
    queryField: "organizationMemberByOrganization"
  )
  @key(
    name: "byUser"
    fields: ["userId", "organizationId"]
    queryField: "organizationMemberByUser"
  ) 
  @key(
    name: "byRole"
    fields: ["organizationId", "role"]
    queryField: "organizationMemberByRole"
  )
  {
  id: ID!
  role: String
  organizationId: ID
  userId: ID
  organization: Organization @connection(name: "OrganizationUsers", keyField: "organizationId")
  user: User @connection(name: "UserOrganizations", keyField: "userId")
}
type Organization
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {

  id: ID!
  orgName: String!
  adminEmail: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  phone: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  owner: String!

  hasPaidState: String
  profileState: String
  address: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  city: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  province: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  postalCode: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  country: String

  location: LatLong
  profileImage: Image
  aboutMeShort: String
  aboutMeLong: String
  orgType: String
  orgSize: String
  orgDescription: String
  joined: String

  members: [OrganizationMember] @connection(name: "OrganizationUsers", keyField: "organizationId")
  ownerOrg: [Group] @connection(keyName: "byOwnerOrg", fields: ["id"])
 # messages: [Message] @connection(name: "OrgMessages", keyField: "organizationId")
 # resource: [ResourceRoot] @connection(name: "OrgResources", keyField: "organizationId")
}
type CourseInfo
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  designedBy: String
  summary: [String]
  courseWeeks: [CourseWeek] @connection(name: "CourseInfoWeek", keyField: "id")
  subTitle: String
  #instructor: User
  introduction: [String]
}

type CourseWeek
 @model 
{
  id: ID!
  week: String
  date: String
  name: String
  leader: String
  courseInfo: CourseInfo @connection(name: "CourseInfoWeek", keyField: "id")
  lessons: [CourseLesson] @connection(name: "CourseWeekLesson", keyField: "id")
}
type CourseLesson 
@model 
{
  id: ID!
  name: String
  time: String
  description: [String]
  courseWeek: CourseWeek @connection(name: "CourseWeekLesson", keyField: "id")
  assignments: [CourseAssignment]
    @connection(name: "CourseLessonAssignment", keyField: "id")
}
type CourseAssignment 
@model 
{
  id: ID!
  due: String
  description: String
  courseLesson: CourseLesson
    @connection(name: "CourseLessonAssignment", keyField: "id")
}
type DirectMessageUser
@model
 @key(name: "byMessageRoom", fields: ["userID", "roomID"])
 @key(name: "byUser", fields: ["roomID", "userID"])
{
  id:ID!
  userID:ID!
  user:User @connection(fields:["userID"])
  roomID:ID!
  room:DirectMessageRoom @connection(fields:["roomID"])
}
type DirectMessageRoom
@model
{
  id:ID!
  messageUsers:[DirectMessageUser] @connection(keyName: "byUser", fields: ["id"])
  directMessage:[DirectMessage] @connection(keyName: "byMessageUser", fields: ["id"])

}
type DirectMessage
@model
@key(name: "byMessageUser", fields: ["messageRoomID", "when"], queryField: "directMessagesByRoom")
{
  id: ID!
  content: String!
  when: String!
  messageRoomID:ID!
  messageRoom:DirectMessageRoom @connection(fields:["messageRoomID"])
}

type Message
  @model
  @key(name: "ByRoom", fields: ["roomId", "when"], queryField: "messagesByRoom")
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  when: String!
  roomId: ID
  userId: ID
  #organizationId: String
  owner: String
  author: User @connection(name: "UserMessages", keyField: "userId")
  #orgAuthor: Organization @connection(name: "OrgMessages", keyField: "organizationId")
  room: Group @connection(name: "RoomMessages", keyField: "roomId")
}
type Subscription {
  onCreateMessageByRoomId(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
}

type ResourceRoot 
@model 
 @auth(rules: [{ allow: groups, groups: ["verifiedUsers"] }])
 #@key(name: "byOrganization", fields: ["organizationId"], queryField: "resourcesByOrganization")
 {
  id: ID!
  type: String
  groupId: String
 # organizationId: String
  resources: [Resource] @connection(name:"r1",keyField: "resourceID")
 # publisher: Organization @connection(name: "OrgResources", keyField: "organizationId")
}
type Resource 
@model 
@auth(rules: [{ allow: groups, groups: ["verifiedUsers"] }])
 @key(name: "byResource", fields: ["resourceID"])
{
  id: ID!
  type: String
  menuTitle: String
  title: String
  image: Image
  description: String
  extendedDescription: String
  series: [ResourceSeries] @connection(name:"r2",keyField: "seriesID")
  resourceID:ID!
  resourceRoot: ResourceRoot! @connection(name:"r1",keyField:"resourceID")
}
type ResourceSeries 
@model 
@auth(rules: [{ allow: groups, groups: ["verifiedUsers"] }])
 @key(name: "byResourceSeries", fields: ["seriesID","title"])
{
  id: ID!
  type: String
  title: String
  description: String
  image: String
  category: [String]
  status: String
  allFiles: String
  playlist: String
  playlistImage: String
  episodes: [ResourceEpisode] @connection(name:"r3",keyField: "episodeID")
  seriesID: ID!
  parentResource: Resource! @connection(name:"r2",keyField: "seriesID")
}

type ResourceEpisode 
@model 
@auth(rules: [{ allow: groups, groups: ["verifiedUsers"] }])
 @key(name: "byResourceEpisode", fields: ["episodeID","title"])
 {
  id: ID!
  episodeNumber: Int
  type: String
  title: String
  description: String
  videoPreview: String
  videoLowRes: String
  videoHiRes: String
  lessonPlan: String
  activityPage: String
  episodeID:ID!
  parentSeries: ResourceSeries! @connection(name:"r3",keyField: "episodeID")
}
