type User 
@model 
@auth(rules: [
 { allow: owner, ownerField: "owner" },
 { allow: groups, groups: ["verifiedUsers"],operations: [read]}
])

{
	id: ID!
	given_name: String!
	family_name: String!
	email: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	phone: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	owner: String

	hasPaidState: String
	address:String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	city:String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	province:String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	postalCode:String @auth(rules: [{ allow: owner, ownerField: "owner" }])
	country:String 

	profileImage:String
	aboutMeShort:String
	aboutMeLong:String
	interests:String
	currentRole:String
	currentScope:String
	personality:String
	orgName:String
	orgType:String
	orgSize:String
	orgDescription:String

	owns: [Group] @connection(name: "OwnerUser", keyField: "owner")
	groups: [GroupMember] @connection(name: "UserMembers", keyField: "userID")
	messages: [Message] @connection(name: "UserMessages", keyField: "userId", sortField: "when")

}
type GroupMember
  @model(queries: null)
  @key(name: "byGroup", fields: ["groupID", "userID"])
  @key(name: "byUser", fields: ["userID", "groupID"]) {
  id: ID!
  groupID: ID
  userID: ID
  group: Group @connection(name: "GroupMembers", keyField: "groupID")
  user: User @connection(name: "UserMembers", keyField: "userID")
}
type Group
@model
@searchable
 @key(name: "byType", fields: ["type", "id"], queryField:"groupByType")
@auth(rules: [
 { allow: owner, ownerField: "owner" },
 { allow: groups, groups: ["verifiedUsers"],operations: [read]}
])

{
	id:ID!
	owner:String!
	ownerUser: User @connection(name: "OwnerUser", keyField: "owner")
	type:String!
	name:String!
	
	description:String!
	memberCount:Int
  	members: [GroupMember] @connection(name: "GroupMembers", keyField: "groupID")
	image:String!
	time:String
	lastUpdated:String
	location:String
	length:String
	effort:String
	cost:String
	organizerGroup:[Group]
	organizerUser:[User]
	instructors:[User]
	messages: [Message] @connection(name: "RoomMessages", keyField: "roomId", sortField: "when")

  }
type CourseInfo
@model
@auth(rules: [
 { allow: owner, ownerField: "owner" },
 { allow: groups, groups: ["verifiedUsers"],operations: [read]}
])
  {
	id:ID!
	designedBy:String
	summary:[String]
	courseDetails:[CourseWeek]
	subTitle:String
	instructor: User
	introduction:[String]
  }

type CourseWeek{
	week:String
	date:String
	name:String
	leader:String
	lessons:[CourseLesson]
}
type CourseLesson{
	name:String
	time:String
	description:[String]
	assignment:[CourseAssignment]
}
type CourseAssignment{
	due:String
	description:String
}


type Message @model(subscriptions: null) 
 @key(name: "ByRoom",fields: ["roomId", "when"], queryField:"messagesByRoom")
 @auth(
    rules: [
      {allow: owner, ownerField: "owner", mutations: [create, update, delete]},
  ])
   {
  id: ID!
  content: String!
  when: String!
  roomId: ID
  userId: ID
  owner: String
  author: User @connection(name: "UserMessages", keyField: "userId")
  room: Group @connection(name: "RoomMessages", keyField: "roomId")
}
type Subscription {
  onCreateMessage(roomId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
}